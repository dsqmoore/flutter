#!/usr/bin/perl

$cache = $ARGV[0];
$update_file = $ARGV[1];

use XML::LibXML;
use Digest::SHA1;
use URI::Escape;

sub video_duration {
    my $entry = shift;
    return ($entry->getElementsByTagName('yt:duration'))[0]->getAttribute("seconds");
}

# Given a search term, return the URL.
sub get_url {
    my $search = shift;
    my $length = shift;
    print "Searching for $search ($length)\n";
    system("curl",
	   "-s",
	   "-o", "/tmp/flutter.url",
	   "https://gdata.youtube.com/feeds/api/videos?q=$search&max-results=20&v=2");
    
    my $parser = XML::LibXML->new();
    my $xmldoc = $parser->parse_file("/tmp/flutter.url");

    my @entries = $xmldoc->getElementsByTagName('entry');
    if (! $#entries) {
	print "Can't find URL\n";
	return;
    }

    # Sort the results so that we choose the video that has the length
    # that's closest to our target song.
    @entries = sort { abs($length - video_duration($a)) cmp
			  abs($length - video_duration($b)) } @entries;

    $best_entry = $entries[0];
    print "Best length is " . video_duration($best_entry) . "\n";
    return ($best_entry->getElementsByTagName('content'))[0]->getAttribute("src");
}

sub kill_mplayer {
    my $pid = shift;
    if ($pid) {
	print "Killing player $pid\n";
	kill 9, $pid;
	system("kill", "-9", "$pid");
    }
    system("pkill mplayer");
}

sub duration {
    my $file = shift;
    open(my $fd, "-|", "mp3info", "-x", "-F", "-r", "a", $file);
    my $length;
    while (<$fd>) {
	if (/^Length: +([0-9]+):([0-9]+)/) {
	    $length = $1*60 + $2;
	}
    }
    close $fd;
    return $length;
}

sub play_file {
    my $file = shift;
    print "Player pid $mplayer_pid\n";
    while (true) {
	my $ffile;
	if (-f "$file.part") {
	    $ffile = "$file.part";
	} else {
	    $ffile = $file;
	}
	system("mplayer",
	       "-volume", "0",
	       "-softvol",
	       "-msglevel", "all=-1",
	       "-zoom", "-fs",
	       "-display", ":1",
	       $ffile);
    }
    exit(0);
}

sub refresh {
    open(UF, $update_file);
    my $current = <UF>;
    close UF;

    chop($current);
    my @current = split("/", $current);

    my $track = $current[$#current];
    $track =~ s/^[0-9][0-9]-|.mp3$//g;

    my $artist = uri_escape($current[$#current - 2]);
    my $album = uri_escape($current[$#current - 1]);
    $track = uri_escape($track);

    my $length = duration($current);
    my $url = get_url("$artist+$album+$track", $length);
    
    if (! $url) {
	$url = get_url("$artist+$track", $length);
    }
    
    if ($url) {
	my $hash = Digest::SHA1::sha1_base64($url);
	$hash =~ s#/#-#g;
	if (! -f "$cache/$hash" &&
	    ! -f "$cache/$hash.part") {
	    my $old_pid = $mplayer_pid;
	    $mplayer_pid = fork();
	    if ($mplayer_pid) {
		return;
	    } else {
		print "Downloading $url $hash\n";
		if (! fork()) {
		    system("youtube-dl",
			   "-o", "$cache/$hash",
			   $url);
		    chdir($cache);
		    # Add a symlink from the name of the song just
		    # because.
		    symlink($hash,
			    $current[$#current - 2] . "_" .
			    $current[$#current - 1] . "_" .
			    $current[$#current] . ".flv");
		    exit(0);
		}
		# We give youtube-dl five seconds head start before
		# starting mplayer.
		sleep(5);
		kill_mplayer($old_pid);
		play_file("$cache/$hash");
	    }
	} else {
	    my $old_pid = $mplayer_pid;
	    $mplayer_pid = fork();
	    if (! $mplayer_pid) {
		play_file("$cache/$hash");
	    } else {
		kill_mplayer($old_pid);
	    }
	}
    }
}

while (true) {
    $timestamp = (stat($update_file))[9];
    if ($timestamp > $last_timestamp) {
	refresh();
    }
    $last_timestamp = $timestamp;
    sleep(1);
}

#!/usr/bin/perl

$cache = $ARGV[0];
$update_file = $ARGV[1];

use XML::LibXML;
use Digest::SHA1;
use URI::Escape;

sub get_url {
    my $search = shift;
    print "Searching for $search\n";
    system("curl",
	   "-s",
	   "-o", "/tmp/flutter.url",
	   "https://gdata.youtube.com/feeds/api/videos?q=$search&max-results=1&v=2");
    
    $parser = XML::LibXML->new();
    $xmldoc = $parser->parse_file("/tmp/flutter.url");
    
    for $content ($xmldoc->getElementsByTagName('content')) {
	$url = $content->getAttribute("src");
    }
    
    if (! $url) {
	print "Can't find URL\n";
    }
    return $url;
}

sub play_file {
    my $file = shift;
    if ($mplayer_pid) {
	print "Killing player $mplayer_pid\n";
	kill 9, $mplayer_pid;
	system("kill", "-9", "$mplayer_pid");
    }
    system("pkill mplayer");
    $mplayer_pid = $$;
    print "Player pid $mplayer_pid\n";
    while (true) {
	my $ffile;
	if (-f "$file.part") {
	    $ffile = "$file.part";
	} else {
	    $ffile = $file;
	}
	system("mplayer",
	       "-volume", "0",
	       "-softvol",
	       "-msglevel", "all=-1",
	       "-zoom", "-fs",
	       "-display", ":1",
	       $ffile);
    }
    exit(0);
}

sub refresh {
    open(UF, $update_file);
    my $current = <UF>;
    close UF;

    chop($current);
    my @current = split("/", $current);

    my $track = $current[$#current];
    $track =~ s/^[0-9][0-9]-|.mp3$//g;

    my $artist = uri_escape($current[$#current - 2]);
    my $album = uri_escape($current[$#current - 1]);
    $track = uri_escape($track);

    my $url = get_url("$artist+$album+$track");
    
    if (! $url) {
	$url = get_url("$artist+$track");
    }
    
    if ($url) {
	my $hash = Digest::SHA1::sha1_base64($url);
	$hash =~ s#/#-#g;
	if (! -f "$cache/$hash" &&
	    ! -f "$cache/$hash.part") {
	    if (fork()) {
		return;
	    } else {
		print "Downloading $url $hash\n";
		if (! fork()) {
		    system("youtube-dl",
			   "-o", "$cache/$hash",
			   $url);
		    chdir($cache);
		    symlink($hash,
			    $current[$#current - 2] . "_" .
			    $current[$#current - 1] . "_" .
			    $current[$#current] . ".flv");
		    exit(0);
		}
		sleep(5);
		play_file("$cache/$hash");
	    }
	} else {
	    if (! fork()) {
		play_file("$cache/$hash");
	    }
	}
    }
}

while (true) {
    $timestamp = (stat($update_file))[9];
    if ($timestamp > $last_timestamp) {
	refresh();
    }
    $last_timestamp = $timestamp;
    #print "Sleeping...\n";
    sleep(1);
}

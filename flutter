#!/usr/bin/perl

$cache = $ARGV[0];
$update_file = $ARGV[1];

use XML::LibXML;
use Digest::SHA1;
use URI::Escape;

sub get_url {
    my $search = shift;
    print "Searching for $search\n";
    system("curl",
	   "-s",
	   "-o", "/tmp/flutter.url",
	   "https://gdata.youtube.com/feeds/api/videos?q=$search&max-results=1&v=2");
    
    $parser = XML::LibXML->new();
    $xmldoc = $parser->parse_file("/tmp/flutter.url");
    
    for $content ($xmldoc->getElementsByTagName('content')) {
	$url = $content->getAttribute("src");
    }
    
    if (! $url) {
	print "Can't find URL\n";
    }
    return $url;
}

sub refresh {
    open(UF, $update_file);
    $current = <UF>;
    close UF;

    @current = split("/", $current);

    $track = $current[$#current - 2];
    $track =~ s/^[0-9][0-9]-|.mp3$//g;
    
    $artist = uri_escape($current[$#current - 2]);
    $album = uri_escape($current[$#current - 1]);
    $track = uri_escape($track);
    
    $url = get_url("$artist+$album+$track");
    
    if (! $url) {
	$url = get_url("$artist+$track");
    }
    
    if ($url) {
	$hash = Digest::SHA1::sha1_base64($url);
	
	if (! -f "$cache/$hash") {
	    print "Downloading $url $hash\n";
	    system("youtube-dl",
		   "-o", "$cache/$hash",
		   $url);
	}
	
	if (-f "$cache/$hash") {
	    if ($mplayer_pid) {
		kill -9, $mplayer_pid;
	    }
	    $mplayer_pid = fork();
	    if (! $mplayer_pid) {
		exec("mplayer",
		     "-volume", "0",
		     "-softvol",
		     "-loop", "0",
		     "$cache/$hash");
		exit(0);
	    }
	}
    }
}

while (true) {
    $timestamp = (stat($update_file))[9];
    print "Sleeping...\n";
    if ($timestamp > $last_timestamp) {
	refresh();
    }
    $last_timestamp = $timestamp;
    sleep(1);
}

